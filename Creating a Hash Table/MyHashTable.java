import java.util.LinkedList;
import java.util.ListIterator;
/**
 * Class MyHashTable represents a HashTable
 */
public class MyHashTable
{
    //********************FIELDS***********************//
    private LinkedList<Student> [] array; //array for chaining
    private int size; //size of the table

    /**
     * Constructor for class MyHashTable
     * @param n the size of the array
     */
    public MyHashTable(int n)
    {
        if(n <= 0 )
            n = 10;
        array = new LinkedList [n];
        this.size = n;
    }

    //*******************METHODS*******************//
    /**
     * Method insert inserts a student to the HashTable using the student ID as the key.
     * Does not allow duplicate insertions
     * @param s the student to insert
     * @returns whether the insertion was successful
     */
    public boolean insert (Student s)
    {
        //convert s's ID to string
        String Id = Long.toString(s.getID());

        //use hashCode method in String class to compute the index
        //take hashCode's returned value and modolus the array size
        int index = Math.abs(Id.hashCode() % array.length);

        if(array[index] == null){ //if there isn't a list at an index, make a new one
            //add the student to the table
            array[index] = new LinkedList<Student>();
            array[index].add(s);
            return true;
        } else{ //check for duplicates by iterating the linked list that make up that index
            ListIterator <Student> itr = array[index].listIterator(0);
            while(itr.hasNext())
            {
                if(itr.next().getID() == s.getID()){
                    return false;
                }
            }
            array[index].add(s); //no duplicates, okay to add
            return true;
        }
    }

    /**
     * Method getStudent returns the student with a given ID
     * @param ID the ID of the student to return
     * @return a student with the passed ID
     */
    public Student getStudent(long ID)
    {
        String Id = Long.toString(ID); //convert the ID to a string 
        int index = Math.abs(Id.hashCode() % array.length); //hash code index
        if((array[index ] != null)){ //if the index generated by the formula is not null
            ListIterator <Student> itr = array[index].listIterator(0); //traverse the list to find the student
            while(itr.hasNext())
            {
                Student s = itr.next();
                if(s.getID() == ID){
                    return s;
                }
            }
        }
        return null; //student is not in the table
    }

    /**
     * Method popStudent returns and removes the student with that ID
     * @param ID the ID of the student to return
     * @return a student with the passed ID
     */
    public Student popStudent(long ID)
    {
        String Id = Long.toString(ID); //convert the ID to a string 
        int index = Math.abs(Id.hashCode() % array.length); //hash code index
        if((array[ index ] != null)){ 
            ListIterator <Student> itr = array[ index ].listIterator(0); //traverse the list to find the student
            while(itr.hasNext())
            {
                Student s = itr.next();
                if(s.getID() == ID){
                    itr.remove(); //remove the student
                    return s;
                }
            }
        }
        return null; //student is not in the table
    }

    /**
     * Method calcLoadFactor calculates the hash table's load factor
     * @return the load factor of the hash table
     */
    public float calcLoadFactor()
    {
        //have a counter count the number of entries in the array
        int counter = 0;
        for(int i = 0; i<array.length; i++){
            if( array[i] != null) {
               counter += array[i].size(); //add each list's size to the counter
            }
        }
        String loadF = String.format("%.2f" ,(float)counter/array.length); //divide the counter by the length of array --format it to 2 decimals
        return Float.parseFloat(loadF); //recast the formated string to a float and return
    }

    /**
     * method size returns the size of the hash table
     * @return size of the hash table
     */
    public int size()
    {
        return this.size;
    }
}
